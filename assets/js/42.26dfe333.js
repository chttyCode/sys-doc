(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{399:function(t,a,r){"use strict";r.r(a);var s=r(44),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"专题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#专题"}},[t._v("#")]),t._v(" 专题")]),t._v(" "),r("h2",{attrs:{id:"上下文组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#上下文组"}},[t._v("#")]),t._v(" 上下文组")]),t._v(" "),r("p",[t._v("我们知道 chrome 是多进程架构，同源站点会使用相同的渲染进程，从 A 打开 B，如果 AB 同源则使用相同的渲染进程，但是如果单独打开则不会共用同一个渲染进程")]),t._v(" "),r("h3",{attrs:{id:"原因分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#原因分析"}},[t._v("#")]),t._v(" 原因分析：")]),t._v(" "),r("p",[t._v("页面的跳转方式：")]),t._v(" "),r("ol",[r("li",[t._v("通过标签来和新标签建立连接")]),t._v(" "),r("li",[t._v("通过 JavaScript 中的 window.open")])]),t._v(" "),r("p",[t._v("通过这两种方式两个页签之间都是有联系的，新页面可以通过 window.opener 引用父页面，通过这两种方式的两个页签之间不论是否同源， window.opener 同样适用，我们把这类具有相互关联的页签称为浏览器上下文组")]),t._v(" "),r("h3",{attrs:{id:"浏览器上下文组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浏览器上下文组"}},[t._v("#")]),t._v(" 浏览器上下文组")]),t._v(" "),r("p",[t._v("我们把一个标签页所包含的内容，诸如 window 对象，历史记录，滚动条位置等信息称为浏览上下文。这些通过脚本相互连接起来的浏览上下文就是浏览上下文组")]),t._v(" "),r("p",[t._v("即：")]),t._v(" "),r("ol",[r("li",[t._v("如果两个标签页都位于同一个浏览上下文组，且属于同一站点，那么这两个标签页会被浏览器分配到同一个渲染进程中。")]),t._v(" "),r("li",[t._v("如果这两个条件不能同时满足，那么这两个标签页会分别使用不同的渲染进程来渲染。")])]),t._v(" "),r("h4",{attrs:{id:"解决的问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解决的问题"}},[t._v("#")]),t._v(" 解决的问题：")]),t._v(" "),r("p",[t._v("合并共用渲染进程")]),t._v(" "),r("h4",{attrs:{id:"存在的问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#存在的问题"}},[t._v("#")]),t._v(" 存在的问题：")]),t._v(" "),r("p",[t._v("同一上下文组中页签可以相互访问")]),t._v(" "),r("h4",{attrs:{id:"解决方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解决方式"}},[t._v("#")]),t._v(" 解决方式：")]),t._v(" "),r("ol",[r("li",[t._v("a 链接的 rel 属性值可以使用了 noopener 和 noreferrer，新页签不与原页面保持关联，即独立创建独立上下文")])]),t._v(" "),r("h2",{attrs:{id:"settime-vs-rfc"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#settime-vs-rfc"}},[t._v("#")]),t._v(" setTime vs RFC")]),t._v(" "),r("p",[t._v("setTime 构建高性能动画存在的问题，更新不及时，会导致掉桢")]),t._v(" "),r("p",[t._v("原因分析：")]),t._v(" "),r("p",[t._v("setTime 是通过延迟队列加入宏任务队列的，而宏任务队列的是按顺序挨个执行的，所以会导致改变动画的回调函数不能按时执行，这一现象称之为队头阻塞")]),t._v(" "),r("p",[t._v("原因分析：")]),t._v(" "),r("p",[t._v("通常情况显示器每秒从显卡的前缓存区读取 60 张位图信息图片，但是浏览器要显示的话，需要将页面的位图信息提交到显卡的后缓存区，GPU 会将前后缓存区对调，后缓存区变成前缓存区，待显示器读取显示")]),t._v(" "),r("p",[r("img",{attrs:{src:"/sys-doc/imgs/vsync.png",alt:"alt 不同步的桢"}})]),t._v(" "),r("p",[t._v("这时候我们会发现，显示器从前缓冲区读取图片，和浏览器生成新的图像到后缓冲区的过程是不同步的")]),t._v(" "),r("p",[t._v("产生的问题：")]),t._v(" "),r("ol",[r("li",[t._v("如果渲染桢比刷新频率慢，会造成屏幕多桢显示同一幅画，即页面会造成卡顿的现象")]),t._v(" "),r("li",[t._v("如果渲染桢比刷新频率快，会造成渲染桢的浪费")]),t._v(" "),r("li",[t._v("就算刷新频率相同，也很慢避免生成桢跟读取频率同步")])]),t._v(" "),r("p",[t._v("总之就是会产生掉桢、漏桢、卡顿的现象")]),t._v(" "),r("p",[t._v("解决方案：requestAnimationFrame")]),t._v(" "),r("p",[t._v("当 GPU 接收到 VSync 信号后，会将 VSync 信号同步给浏览器进程，浏览器进程再将其同步到对应的渲染进程，渲染进程接收到 VSync 信号之后，就可以准备绘制新的一帧了，具体流程你可以参考下图：")]),t._v(" "),r("p",[r("img",{attrs:{src:"/sys-doc/imgs/bind-vsync.png",alt:"alt 同步的桢"}})]),t._v(" "),r("h2",{attrs:{id:"audits-性能优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#audits-性能优化"}},[t._v("#")]),t._v(" Audits 性能优化")]),t._v(" "),r("p",[t._v("Web 性能描述了 Web 应用在浏览器上的加载和显示的速度。")]),t._v(" "),r("p",[t._v("即优化的角度：")]),t._v(" "),r("ol",[r("li",[t._v("加载阶段")]),t._v(" "),r("li",[t._v("交互阶段")])]),t._v(" "),r("h3",{attrs:{id:"性能检测工具-performance-vs-audits"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#性能检测工具-performance-vs-audits"}},[t._v("#")]),t._v(" 性能检测工具：Performance vs Audits")]),t._v(" "),r("p",[t._v("Performance 非常强大，但只提供运行时的数据\nAudits 隐藏了数据细节，只提供直观性能数据和优化建议")]),t._v(" "),r("h3",{attrs:{id:"检测准备"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#检测准备"}},[t._v("#")]),t._v(" 检测准备")]),t._v(" "),r("ol",[r("li",[t._v("稳定版本的 chrome 即可")]),t._v(" "),r("li",[t._v("在隐身模式下进行，避免插件、缓存、cookie 的影响")])]),t._v(" "),r("h3",{attrs:{id:"利用-audits-配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#利用-audits-配置"}},[t._v("#")]),t._v(" 利用 Audits 配置")]),t._v(" "),r("p",[t._v("监控类型")]),t._v(" "),r("ol",[r("li",[t._v("Web 性能 (Performance)")]),t._v(" "),r("li",[t._v("PWA(Progressive Web App) 程序的性能")]),t._v(" "),r("li",[t._v("最佳实践策略 (Best practices)")]),t._v(" "),r("li",[t._v("无障碍功能 (Accessibility)")]),t._v(" "),r("li",[t._v("SEO 搜素引擎优化 (SEO)")])]),t._v(" "),r("p",[t._v("设备类型：Moblie、Desktop")]),t._v(" "),r("h3",{attrs:{id:"解读性能报告"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解读性能报告"}},[t._v("#")]),t._v(" 解读性能报告")]),t._v(" "),r("h4",{attrs:{id:"性能指标-metrics"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#性能指标-metrics"}},[t._v("#")]),t._v(" 性能指标 (Metrics)")]),t._v(" "),r("p",[t._v("对应加载阶段的 6 个指标，View Trace 按钮，点击该按钮可以跳转到 Performance 标签")]),t._v(" "),r("h5",{attrs:{id:"首次绘制-first-paint"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#首次绘制-first-paint"}},[t._v("#")]),t._v(" 首次绘制 (First Paint)")]),t._v(" "),r("p",[t._v("在渲染进程确认要渲染当前的请求后，渲染进程会创建一个空白页面，我们把创建空白页面的这个时间点称为 First Paint，简称 FP")]),t._v(" "),r("p",[t._v("First Content Paint，简称 FCP，即等待页面关键资源加载完，到绘制出第一个像素的时间点")]),t._v(" "),r("p",[t._v("Largest Content Paint，简称 LCP，即页面首屏内容完全绘制出来的时间点")]),t._v(" "),r("p",[t._v("原因：")]),t._v(" "),r("p",[t._v("可能由于网络原因导致加载时间过久")]),t._v(" "),r("p",[t._v("解决方案：")]),t._v(" "),r("p",[t._v("(参考网络性能优化)[https://chttycode.github.io/sys-doc/programme/browser-5.html]")]),t._v(" "),r("h5",{attrs:{id:"首次有效绘制-first-meaningfull-paint"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#首次有效绘制-first-meaningfull-paint"}},[t._v("#")]),t._v(" 首次有效绘制 (First Meaningfull Paint)")]),t._v(" "),r("p",[t._v("介于 FCP 和 LCP 中间，但计算比较复杂，而且容易出错，现在不推荐使用该指标，推荐使用 LCP 指标")]),t._v(" "),r("p",[t._v("原因：")]),t._v(" "),r("p",[t._v("可能是加载关键资源花的时间过久，也有可能是 JavaScript 执行过程中所花的时间过久")]),t._v(" "),r("h5",{attrs:{id:"首屏时间-speed-index"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#首屏时间-speed-index"}},[t._v("#")]),t._v(" 首屏时间 (Speed Index)")]),t._v(" "),r("p",[t._v("首屏时间，即 LCP 首屏时间的值越大，那么加载速度越慢")]),t._v(" "),r("h5",{attrs:{id:"首次-cpu-空闲时间-first-cpu-idle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#首次-cpu-空闲时间-first-cpu-idle"}},[t._v("#")]),t._v(" 首次 CPU 空闲时间 (First CPU Idle)")]),t._v(" "),r("p",[t._v("也称为 First Interactive，即首次可交互时间")]),t._v(" "),r("h5",{attrs:{id:"完全可交互时间-time-to-interactive"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#完全可交互时间-time-to-interactive"}},[t._v("#")]),t._v(" 完全可交互时间 (Time to Interactive)")]),t._v(" "),r("p",[t._v("也称 TTI，它表示页面中所有元素都达到了可交互的时长。")]),t._v(" "),r("p",[t._v("优化策略：")]),t._v(" "),r("p",[t._v("推迟执行一些和生成页面无关的 JavaScript 工作。")]),t._v(" "),r("h5",{attrs:{id:"最大估计输入延时-max-potential-first-input-delay"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#最大估计输入延时-max-potential-first-input-delay"}},[t._v("#")]),t._v(" 最大估计输入延时 (Max Potential First Input Delay)")]),t._v(" "),r("p",[t._v("页面在最繁忙时，估算的窗口响应用户时间")]),t._v(" "),r("p",[t._v("优化策略：")]),t._v(" "),r("p",[t._v("可以使用 WebWorker 来执行一些计算，从而释放主线程")]),t._v(" "),r("h4",{attrs:{id:"可优化项-opportunities"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#可优化项-opportunities"}},[t._v("#")]),t._v(" 可优化项 (Opportunities)")]),t._v(" "),r("p",[t._v("Audits 已给出优化策略")]),t._v(" "),r("h4",{attrs:{id:"手动诊断-diagnostics"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#手动诊断-diagnostics"}},[t._v("#")]),t._v(" 手动诊断 (Diagnostics)")]),t._v(" "),r("p",[t._v("采集了一些可能存在性能问题的指标")]),t._v(" "),r("h4",{attrs:{id:"运行时设置-runtime-settings"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#运行时设置-runtime-settings"}},[t._v("#")]),t._v(" 运行时设置 (Runtime Settings)")]),t._v(" "),r("p",[r("img",{attrs:{src:"/sys-doc/imgs/loading-opt.png",alt:"alt 加载过程"}})]),t._v(" "),r("h2",{attrs:{id:"performance-性能优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#performance-性能优化"}},[t._v("#")]),t._v(" performance 性能优化")]),t._v(" "),r("p",[t._v("记录页面运行时的所有数据，不同于 Audits， performance 不会给出性能得分，也不会给出优化建议，它只是单纯地采集性能数据，并将采集到的数据按照时间线的方式来展现，我们要做的就是依据原始数据来分析 Web 应用的性能问题")]),t._v(" "),r("h3",{attrs:{id:"配置-performance"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#配置-performance"}},[t._v("#")]),t._v(" 配置 Performance")]),t._v(" "),r("p",[t._v("Network 限制网络加载速度\nCPU 来限制 CPU 的运算速度")]),t._v(" "),r("p",[t._v("录制方式")]),t._v(" "),r("ol",[r("li",[t._v("录制加载阶段的性能数据时")]),t._v(" "),r("li",[t._v("录制交互阶段的性能时，那么需要手动停止录制过程")])]),t._v(" "),r("h3",{attrs:{id:"报告页解读"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#报告页解读"}},[t._v("#")]),t._v(" 报告页解读")]),t._v(" "),r("p",[t._v("包含三个主要的部分，分别为概览面板、性能指标面板和详情面板。")]),t._v(" "),r("h4",{attrs:{id:"概览面板"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#概览面板"}},[t._v("#")]),t._v(" 概览面板")]),t._v(" "),r("p",[t._v("如果 FPS 图表上出现了红色块，那么就表示红色块附近渲染出一帧所需时间过久，帧的渲染时间过久，就有可能导致页面卡顿")]),t._v(" "),r("p",[t._v("如果 CPU 图形占用面积太大，表示 CPU 使用率就越高，那么就有可能因为某个 JavaScript 占用太多的主线程时间，从而影响其他任务的执行")]),t._v(" "),r("p",[t._v("如果 V8 的内存使用量一直在增加，就有可能是某种原因导致了内存泄漏")]),t._v(" "),r("h4",{attrs:{id:"性能指标面板"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#性能指标面板"}},[t._v("#")]),t._v(" 性能指标面板")]),t._v(" "),r("p",[t._v("用于定位分析概览面板发现的问题")]),t._v(" "),r("h5",{attrs:{id:"main-指标记录渲染主线程的任务执行过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#main-指标记录渲染主线程的任务执行过程"}},[t._v("#")]),t._v(" Main 指标记录渲染主线程的任务执行过程")]),t._v(" "),r("p",[t._v("一段段横条代表执行一个个任务，长度越长，花费的时间越多；竖向代表该任务的执行记录")]),t._v(" "),r("h5",{attrs:{id:"compositor-指标记录了合成线程的任务执行过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#compositor-指标记录了合成线程的任务执行过程"}},[t._v("#")]),t._v(" Compositor 指标记录了合成线程的任务执行过程")]),t._v(" "),r("p",[t._v("渲染主线程会将绘列表制提交 (commit)给合成线程，并由合成线程合成出来漂亮的页面。因此，监控合成线程的任务执行记录也相对比较重要")]),t._v(" "),r("h5",{attrs:{id:"光栅化线程池-raster"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#光栅化线程池-raster"}},[t._v("#")]),t._v(" 光栅化线程池 (Raster)")]),t._v(" "),r("p",[t._v("在合成线程执行任务的过程中，还需要 GPU 进程的配合来生成位图，我们把这个 GPU 生成位图的过程称为光栅化，如果合成线程直接和 GPU 进程进行通信，那么势必会阻塞后面的合成任务，因此合成线程又维护了一个光栅化线程池 (Raster)，用来让 GPU 执行光栅化的任务")]),t._v(" "),r("p",[t._v("Raster 是线程池，所以如果你点开 Raster 项，可以看到它维护了多个线程。")]),t._v(" "),r("h5",{attrs:{id:"gpu-指标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gpu-指标"}},[t._v("#")]),t._v(" GPU 指标")]),t._v(" "),r("p",[t._v("记录了 GPU 进程主线程的任务执行过程")]),t._v(" "),r("h5",{attrs:{id:"chrome-childiothread-指标-即-io-线程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#chrome-childiothread-指标-即-io-线程"}},[t._v("#")]),t._v(" Chrome_ChildIOThread 指标 即 IO 线程")]),t._v(" "),r("p",[t._v("用来接收用户输入事件、网络事件、设备相关等事件，如果事件需要渲染主线程来处理，那么 IO 线程还会将这些事件转发给渲染主线程")]),t._v(" "),r("h5",{attrs:{id:"network-指标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#network-指标"}},[t._v("#")]),t._v(" Network 指标")]),t._v(" "),r("p",[t._v("网络记录展示了页面中的每个网络请求所消耗的时长，并以瀑布流的形式展现")]),t._v(" "),r("h5",{attrs:{id:"timings-指标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#timings-指标"}},[t._v("#")]),t._v(" Timings 指标")]),t._v(" "),r("p",[t._v("用来记录一些关键的时间节点在何时产生的数据信息，关于这些关键时间点的信息我们在上一节也介绍过了，诸如 FP、FCP、LCP 等。")]),t._v(" "),r("h5",{attrs:{id:"frames-指标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#frames-指标"}},[t._v("#")]),t._v(" Frames 指标")]),t._v(" "),r("p",[t._v("浏览器生成每帧的记录，包括了渲染出每帧的时长、每帧的图层构造等信息")]),t._v(" "),r("h5",{attrs:{id:"interactions-指标"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#interactions-指标"}},[t._v("#")]),t._v(" Interactions 指标")]),t._v(" "),r("p",[t._v("用来记录用户交互操作，比如点击鼠标、输入文字等交互信息。")]),t._v(" "),r("h4",{attrs:{id:"详情面板"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#详情面板"}},[t._v("#")]),t._v(" 详情面板")]),t._v(" "),r("p",[t._v("性能指标面板就是以图形的形式描述大致的信息，想要知道具体信息就需要详情面板")])])}),[],!1,null,null,null);a.default=v.exports}}]);