(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{398:function(t,v,a){"use strict";a.r(v);var l=a(44),_=Object(l.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"share-browser"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#share-browser"}},[t._v("#")]),t._v(" share browser")]),t._v(" "),a("h2",{attrs:{id:"基础知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[t._v("#")]),t._v(" 基础知识")]),t._v(" "),a("h4",{attrs:{id:"浏览器简历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器简历"}},[t._v("#")]),t._v(" 浏览器简历")]),t._v(" "),a("ul",[a("li",[t._v("初代浏览器 Netscape Navigator")]),t._v(" "),a("li",[t._v("浏览器大战 Netscape 倒下，微软 Internet Explorer 6 垄断了市场，但是不兼容标准，但是微软好景不长，Netscape 的那波人又搞了一个 Firefox、同时苹果搞了一个 Safari 还有 Opera 等与其竞争")])]),t._v(" "),a("h4",{attrs:{id:"当下浏览器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当下浏览器"}},[t._v("#")]),t._v(" 当下浏览器")]),t._v(" "),a("ul",[a("li",[t._v("三分天下，Mozilla 的 Gecko、Google 的 Blink、还有苹果的的 WebKit（Blink 的近亲）")]),t._v(" "),a("li",[t._v("Gecko 从初代开始就以兼容标准为特色、延续至今")]),t._v(" "),a("li",[t._v("WebKit 脱胎于 KHTML 及 KJS，即为其一个分支发展而来，初代由苹果开发，前期仅开源 WebCore 及 JavaScriptCore 开源，于 2005 年 6 月 7 日将 Webkit 开源")]),t._v(" "),a("li",[t._v("Blink 由 Google 于 2013 年 4 月 3 日宣传自行开发，Blink 从 WebKit 的http://trac.webkit.org/changeset/147503/webkit节点checkout,自此chrome拥有了更多的自由度、精简优化了整个WebKit程序库")])]),t._v(" "),a("h4",{attrs:{id:"chrome-的架构演进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chrome-的架构演进"}},[t._v("#")]),t._v(" chrome 的架构演进")]),t._v(" "),a("ul",[a("li",[t._v("单进程架构\n"),a("ul",[a("li",[t._v("所有的功能都运行在一个浏览器进程中，这些功能包括了网络、插件、javascript 引擎、渲染引擎等")]),t._v(" "),a("li",[t._v("存在的问题\n"),a("ul",[a("li",[t._v("不稳定\n"),a("ul",[a("li",[t._v("所有功能运行在同一个进程中，任意一个功能有问题都会引起浏览器的崩溃")])])]),t._v(" "),a("li",[t._v("不流畅\n"),a("ul",[a("li",[t._v("所有页面运行在同一个进程中、内存泄漏、占用主线程时间过长都是引起不流畅的原因")])])]),t._v(" "),a("li",[t._v("不安全\n"),a("ul",[a("li",[t._v("可以插件和脚本两个方面看，插件可以用 c/c++写，直接读取系统资源、脚本可以通过浏览器漏洞获取系统权限")])])])])]),t._v(" "),a("li",[t._v("多进程架构")])])]),t._v(" "),a("li",[t._v("多进程架构\n"),a("img",{attrs:{src:"/sys-doc/imgs/browser-arch.png",alt:"alt 多进程架构图"}}),t._v(" "),a("ul",[a("li",[t._v("进程描述\n"),a("table",[a("thead",[a("tr",[a("th",[t._v("process")]),t._v(" "),a("th",[t._v("toTos")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Browser")]),t._v(" "),a("td",[t._v("主要负责地址栏，书签，后退和前进按钮、界面显示、用户交互、子进程管理，同时提供存储等功能")])]),t._v(" "),a("tr",[a("td",[t._v("Renderer")]),t._v(" "),a("td",[t._v("核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，Blink 引擎运行在其中，Blink 默认嵌入了 V8 javascript 引擎，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下")])]),t._v(" "),a("tr",[a("td",[t._v("Plugin")]),t._v(" "),a("td",[t._v("控制网站使用的任何插件，例如 flash。")])]),t._v(" "),a("tr",[a("td",[t._v("GPU")]),t._v(" "),a("td",[t._v("Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程")])])])])]),t._v(" "),a("li",[t._v("解决了")]),t._v(" "),a("li",[t._v("稳定性\n"),a("ul",[a("li",[t._v("多进程架构相互隔离，某一进程崩溃不会引起整个浏览器崩溃")])])]),t._v(" "),a("li",[t._v("安全问题\n"),a("ul",[a("li",[t._v("多进程架构可以使用安全沙箱机制，chrome 的插件进程&渲染进程运行在安全沙箱中")])])]),t._v(" "),a("li",[t._v("流畅问题\n"),a("ul",[a("li",[t._v("chrome 默认为每个 tab 创建一个渲染进程，即时 javascript 阻塞了，也不会影响浏览器或其他 tab")])])]),t._v(" "),a("li",[t._v("存在的问题\n"),a("ul",[a("li",[t._v("资源占用\n"),a("ul",[a("li",[t._v("每个进程都会有公共的基础架构副本，这无疑增加了内存的占用")])])])])])])]),t._v(" "),a("li",[t._v("服务架构\n"),a("ul",[a("li",[t._v("未来面向服务的架构\n"),a("ul",[a("li",[t._v("即采用的是'面向服务架构'的思想，将原来的模块重构成独立的服务，每个服务定义好访问接口，从而构建一个高内聚、低偶尔、易维护、扩展的系统")]),t._v(" "),a("li",[t._v("总的思想就是在强大性能设备上会以多进程的方式运行基础服务，但是如果在资源受限的设备上，Chrome 会将很多服务整合到一个进程中，从而节省内存占用")]),t._v(" "),a("li",[t._v("资源受限\n"),a("img",{attrs:{src:"/sys-doc/imgs/browser-arch2.png",alt:"alt 多进程架构图"}})]),t._v(" "),a("li",[t._v("资源丰富\n"),a("img",{attrs:{src:"/sys-doc/imgs/servicfication.png",alt:"alt 多进程架构图"}})]),t._v(" "),a("li",[t._v("站点隔离(Site Isolation) 实现得益于多进程架构")])])])])])]),t._v(" "),a("h4",{attrs:{id:"输入-url-到页面显示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输入-url-到页面显示"}},[t._v("#")]),t._v(" 输入 URL 到页面显示")]),t._v(" "),a("ul",[a("li",[t._v("导航流程\n"),a("ul",[a("li",[t._v("导航流程从浏览器进程开始\n"),a("ul",[a("li",[t._v("除了独立出来进程之外，其他功能都是由浏览器进行完成的")]),t._v(" "),a("li",[t._v("浏览器进程中的线程\n"),a("ul",[a("li",[t._v("UI 线程")]),t._v(" "),a("li",[t._v("network 网络线程(网络进程)")]),t._v(" "),a("li",[t._v("storage 线程")])])])])]),t._v(" "),a("li",[t._v("用户输入\n"),a("ul",[a("li",[t._v("UI 线程会判断是搜索还是 site")]),t._v(" "),a("li",[t._v("在执行导航之前还有执行当前页面的 beforeunload 事件，该事件可以取消导航流程")]),t._v(" "),a("li",[t._v("执行导航的时候并不是立即刷新当前的页面，而是要等待渲染进程提交文档后才会刷新页面")])])]),t._v(" "),a("li",[t._v("开始导航\n"),a("ul",[a("li",[t._v("UI 线程\n"),a("ul",[a("li",[t._v("UI 线程调用网络线程(网络进程)，获取网络资源")]),t._v(" "),a("li",[t._v("同时 UI 线程就会找到或者启动一个渲染进程\n"),a("ul",[a("li",[t._v("找到可能存在可复用的渲染进程、同站点")]),t._v(" "),a("li",[t._v("发起网络请求和准备渲染进程并行，网络请求有一定的时延")])])])])]),t._v(" "),a("li",[t._v("网络线程(网络进程)(pc)\n"),a("ol",[a("li",[t._v("如果网络线程(网络进程)收到 301 这样的响应码，会通知 UI 线程发生重定向")]),t._v(" "),a("li",[t._v("网络线程(网络进程)接受数据判别 content-type，分发执行 html、css、js 交由渲染进程处理，file 交由 download manager")]),t._v(" "),a("li",[t._v("检测 html 内容是否符合安全规范，checks down\n"),a("ul",[a("li",[t._v("阻止跨域")]),t._v(" "),a("li",[t._v("资源混合警告(http/https)")])])]),t._v(" "),a("li",[t._v("通知 UI 线程，数据 ready")]),t._v(" "),a("li",[t._v("UI 找到之前创建的渲染进程，进行页面渲染")])])])])])])])]),t._v(" "),a("h4",{attrs:{id:"渲染流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染流程"}},[t._v("#")]),t._v(" 渲染流程")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v('> 渲染过程的核心工作是将 HTML、CSS 和 JavaScript 转换成一个用户可以交互的网页,主要有主线程、工作线程、合成线程、光栅线程组成\n\n![alt 多进程架构图](/sys-doc/imgs/renderer.png)\n\n- DOM 解析\n\n  - 接受到浏览器进程的提交文档通知后，建立与网络进程的数据连接、开始接受 html Data、但是 HTML 数据流，无法被浏览器识别，需根据 [HTML Standard](https://html.spec.whatwg.org/) 标准进行解析转为能够识别 DOM 树结构、DOM 结构可以被浏览器识别同时提供 javascript 操作的接口\n\n  ![alt 多进程架构图](/sys-doc/imgs/dom.png)\n\n  - DOM 解析过程中遇到 script 会中断等待 javascript 的下载执行\n  - DOM 解析过程可以对 css 设置预解析<link rel="preload">,对 js 可以设置 async or defer 避免中断 DOM 解析\n\n- 样式计算\n  - 同样需要主线程把 CSS 转换为浏览器能够理解的 styleSheets。因为 css 中的属性值有很多除了转换结构，还需转换样式表中的属性值，使其标准化，eg:2em 被解析成了 32px，red 被解析成了 rgb(255,0,0)，bold 被解析成了 700，根据 dom 的继承关系、层叠关系来计算合理的样式\n- 布局阶段\n\n  - 有了 DOM 树和样式还不足以画出页面，因为不知道每个元素纪在页面中的几何位置\n  - 主线程根据 DOM 树和样式表计算出每个元素的几何位置，最后生产布局树，布局树较 DOM 有 2 个不同点：第一设置 display:none 属性的节点不会出现在布局树上，第二伪元素也会出现在布局树上\n  - 任务几何属性的变动都会引起重新布局，而重布局是及其消耗性能的工作\n\n- 绘制\n')])])]),a("ul",[a("li",[t._v("交互演进\n"),a("ul",[a("li",[t._v("单进程\n"),a("ul",[a("li",[t._v("存在的问题")])])]),t._v(" "),a("li",[t._v("事件循环\n"),a("ul",[a("li",[t._v("存在的问")])])]),t._v(" "),a("li",[t._v("微任务")]),t._v(" "),a("li",[t._v("宏任务")]),t._v(" "),a("li",[t._v("延迟队列")])])])]),t._v(" "),a("h2",{attrs:{id:"通信演进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通信演进"}},[t._v("#")]),t._v(" 通信演进")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("- Http1.0\n- Http1.1\n- Http2\n- Http3\n")])])]),a("h2",{attrs:{id:"性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[t._v("#")]),t._v(" 性能优化")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("- 性能分析\n- 加载阶段\n- 交互阶段\n- 卸载\n")])])]),a("h2",{attrs:{id:"安全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[t._v("#")]),t._v(" 安全")]),t._v(" "),a("h2",{attrs:{id:"缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[t._v("#")]),t._v(" 缓存")])])}),[],!1,null,null,null);v.default=_.exports}}]);