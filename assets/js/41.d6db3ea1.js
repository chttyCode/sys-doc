(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{399:function(t,a,s){"use strict";s.r(a);var v=s(44),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"专题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#专题"}},[t._v("#")]),t._v(" 专题")]),t._v(" "),s("h2",{attrs:{id:"上下文组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#上下文组"}},[t._v("#")]),t._v(" 上下文组")]),t._v(" "),s("p",[t._v("我们知道 chrome 是多进程架构，同源站点会使用相同的渲染进程，从 A 打开 B，如果 AB 同源则使用相同的渲染进程，但是如果单独打开则不会共用同一个渲染进程")]),t._v(" "),s("h3",{attrs:{id:"原因分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原因分析"}},[t._v("#")]),t._v(" 原因分析：")]),t._v(" "),s("p",[t._v("页面的跳转方式：")]),t._v(" "),s("ol",[s("li",[t._v("通过标签来和新标签建立连接")]),t._v(" "),s("li",[t._v("通过 JavaScript 中的 window.open")])]),t._v(" "),s("p",[t._v("通过这两种方式两个页签之间都是有联系的，新页面可以通过 window.opener 引用父页面，通过这两种方式的两个页签之间不论是否同源， window.opener 同样适用，我们把这类具有相互关联的页签称为浏览器上下文组")]),t._v(" "),s("h3",{attrs:{id:"浏览器上下文组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器上下文组"}},[t._v("#")]),t._v(" 浏览器上下文组")]),t._v(" "),s("p",[t._v("我们把一个标签页所包含的内容，诸如 window 对象，历史记录，滚动条位置等信息称为浏览上下文。这些通过脚本相互连接起来的浏览上下文就是浏览上下文组")]),t._v(" "),s("p",[t._v("即：")]),t._v(" "),s("ol",[s("li",[t._v("如果两个标签页都位于同一个浏览上下文组，且属于同一站点，那么这两个标签页会被浏览器分配到同一个渲染进程中。")]),t._v(" "),s("li",[t._v("如果这两个条件不能同时满足，那么这两个标签页会分别使用不同的渲染进程来渲染。")])]),t._v(" "),s("h4",{attrs:{id:"解决的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决的问题"}},[t._v("#")]),t._v(" 解决的问题：")]),t._v(" "),s("p",[t._v("合并共用渲染进程")]),t._v(" "),s("h4",{attrs:{id:"存在的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存在的问题"}},[t._v("#")]),t._v(" 存在的问题：")]),t._v(" "),s("p",[t._v("同一上下文组中页签可以相互访问")]),t._v(" "),s("h4",{attrs:{id:"解决方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决方式"}},[t._v("#")]),t._v(" 解决方式：")]),t._v(" "),s("ol",[s("li",[t._v("a 链接的 rel 属性值可以使用了 noopener 和 noreferrer，新页签不与原页面保持关联，即独立创建独立上下文")])]),t._v(" "),s("h2",{attrs:{id:"settime-vs-rfc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#settime-vs-rfc"}},[t._v("#")]),t._v(" setTime vs RFC")]),t._v(" "),s("p",[t._v("setTime 构建高性能动画存在的问题，更新不及时，会导致掉桢")]),t._v(" "),s("p",[t._v("原因分析：")]),t._v(" "),s("p",[t._v("setTime 是通过延迟队列加入宏任务队列的，而宏任务队列的是按顺序挨个执行的，所以会导致改变动画的回调函数不能按时执行，这一现象称之为队头阻塞")]),t._v(" "),s("p",[t._v("原因分析：")]),t._v(" "),s("p",[t._v("通常情况显示器每秒从显卡的前缓存区读取 60 张位图信息图片，但是浏览器要显示的话，需要将页面的位图信息提交到显卡的后缓存区，GPU 会将前后缓存区对调，后缓存区变成前缓存区，待显示器读取显示")]),t._v(" "),s("p",[s("img",{attrs:{src:"/sys-doc/imgs/vsync.png",alt:"alt 不同步的桢"}})]),t._v(" "),s("p",[t._v("这时候我们会发现，显示器从前缓冲区读取图片，和浏览器生成新的图像到后缓冲区的过程是不同步的")]),t._v(" "),s("p",[t._v("产生的问题：")]),t._v(" "),s("ol",[s("li",[t._v("如果渲染桢比刷新频率慢，会造成屏幕多桢显示同一幅画，即页面会造成卡顿的现象")]),t._v(" "),s("li",[t._v("如果渲染桢比刷新频率快，会造成渲染桢的浪费")]),t._v(" "),s("li",[t._v("就算刷新频率相同，也很慢避免生成桢跟读取频率同步")])]),t._v(" "),s("p",[t._v("总之就是会产生掉桢、漏桢、卡顿的现象")]),t._v(" "),s("p",[t._v("解决方案：requestAnimationFrame")]),t._v(" "),s("p",[t._v("当 GPU 接收到 VSync 信号后，会将 VSync 信号同步给浏览器进程，浏览器进程再将其同步到对应的渲染进程，渲染进程接收到 VSync 信号之后，就可以准备绘制新的一帧了，具体流程你可以参考下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/sys-doc/imgs/bind-vsync.png",alt:"alt 同步的桢"}})]),t._v(" "),s("h2",{attrs:{id:"audits-性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#audits-性能优化"}},[t._v("#")]),t._v(" Audits 性能优化")]),t._v(" "),s("p",[t._v("Web 性能描述了 Web 应用在浏览器上的加载和显示的速度。")]),t._v(" "),s("p",[t._v("即优化的角度：")]),t._v(" "),s("ol",[s("li",[t._v("加载阶段")]),t._v(" "),s("li",[t._v("交互阶段")])]),t._v(" "),s("h3",{attrs:{id:"性能检测工具-performance-vs-audits"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能检测工具-performance-vs-audits"}},[t._v("#")]),t._v(" 性能检测工具：Performance vs Audits")]),t._v(" "),s("p",[t._v("Performance 非常强大，但只提供运行时的数据\nAudits 隐藏了数据细节，只提供直观性能数据和优化建议")]),t._v(" "),s("h3",{attrs:{id:"检测准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检测准备"}},[t._v("#")]),t._v(" 检测准备")]),t._v(" "),s("ol",[s("li",[t._v("稳定版本的 chrome 即可")]),t._v(" "),s("li",[t._v("在隐身模式下进行，避免插件、缓存、cookie 的影响")])]),t._v(" "),s("h3",{attrs:{id:"利用-audits-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#利用-audits-配置"}},[t._v("#")]),t._v(" 利用 Audits 配置")]),t._v(" "),s("p",[t._v("监控类型")]),t._v(" "),s("ol",[s("li",[t._v("Web 性能 (Performance)")]),t._v(" "),s("li",[t._v("PWA(Progressive Web App) 程序的性能")]),t._v(" "),s("li",[t._v("最佳实践策略 (Best practices)")]),t._v(" "),s("li",[t._v("无障碍功能 (Accessibility)")]),t._v(" "),s("li",[t._v("SEO 搜素引擎优化 (SEO)")])]),t._v(" "),s("p",[t._v("设备类型：Moblie、Desktop")]),t._v(" "),s("h3",{attrs:{id:"解读性能报告"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解读性能报告"}},[t._v("#")]),t._v(" 解读性能报告")]),t._v(" "),s("h4",{attrs:{id:"性能指标-metrics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能指标-metrics"}},[t._v("#")]),t._v(" 性能指标 (Metrics)")]),t._v(" "),s("p",[t._v("对应加载阶段的 6 个指标，View Trace 按钮，点击该按钮可以跳转到 Performance 标签")]),t._v(" "),s("h5",{attrs:{id:"首次绘制-first-paint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#首次绘制-first-paint"}},[t._v("#")]),t._v(" 首次绘制 (First Paint)")]),t._v(" "),s("p",[t._v("在渲染进程确认要渲染当前的请求后，渲染进程会创建一个空白页面，我们把创建空白页面的这个时间点称为 First Paint，简称 FP")]),t._v(" "),s("p",[t._v("First Content Paint，简称 FCP，即等待页面关键资源加载完，到绘制出第一个像素的时间点")]),t._v(" "),s("p",[t._v("Largest Content Paint，简称 LCP，即页面首屏内容完全绘制出来的时间点")]),t._v(" "),s("p",[t._v("原因：")]),t._v(" "),s("p",[t._v("可能由于网络原因导致加载时间过久")]),t._v(" "),s("p",[t._v("解决方案：")]),t._v(" "),s("p",[t._v("(参考网络性能优化)[https://chttycode.github.io/sys-doc/programme/browser-5.html]")]),t._v(" "),s("h5",{attrs:{id:"首次有效绘制-first-meaningfull-paint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#首次有效绘制-first-meaningfull-paint"}},[t._v("#")]),t._v(" 首次有效绘制 (First Meaningfull Paint)")]),t._v(" "),s("p",[t._v("介于 FCP 和 LCP 中间，但计算比较复杂，而且容易出错，现在不推荐使用该指标，推荐使用 LCP 指标")]),t._v(" "),s("p",[t._v("原因：")]),t._v(" "),s("p",[t._v("可能是加载关键资源花的时间过久，也有可能是 JavaScript 执行过程中所花的时间过久")]),t._v(" "),s("h5",{attrs:{id:"首屏时间-speed-index"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#首屏时间-speed-index"}},[t._v("#")]),t._v(" 首屏时间 (Speed Index)")]),t._v(" "),s("p",[t._v("首屏时间，即 LCP 首屏时间的值越大，那么加载速度越慢")]),t._v(" "),s("h5",{attrs:{id:"首次-cpu-空闲时间-first-cpu-idle"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#首次-cpu-空闲时间-first-cpu-idle"}},[t._v("#")]),t._v(" 首次 CPU 空闲时间 (First CPU Idle)")]),t._v(" "),s("p",[t._v("也称为 First Interactive，即首次可交互时间")]),t._v(" "),s("h5",{attrs:{id:"完全可交互时间-time-to-interactive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完全可交互时间-time-to-interactive"}},[t._v("#")]),t._v(" 完全可交互时间 (Time to Interactive)")]),t._v(" "),s("p",[t._v("也称 TTI，它表示页面中所有元素都达到了可交互的时长。")]),t._v(" "),s("p",[t._v("优化策略：")]),t._v(" "),s("p",[t._v("推迟执行一些和生成页面无关的 JavaScript 工作。")]),t._v(" "),s("h5",{attrs:{id:"最大估计输入延时-max-potential-first-input-delay"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最大估计输入延时-max-potential-first-input-delay"}},[t._v("#")]),t._v(" 最大估计输入延时 (Max Potential First Input Delay)")]),t._v(" "),s("p",[t._v("页面在最繁忙时，估算的窗口响应用户时间")]),t._v(" "),s("p",[t._v("优化策略：")]),t._v(" "),s("p",[t._v("可以使用 WebWorker 来执行一些计算，从而释放主线程")]),t._v(" "),s("h4",{attrs:{id:"可优化项-opportunities"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可优化项-opportunities"}},[t._v("#")]),t._v(" 可优化项 (Opportunities)")]),t._v(" "),s("p",[t._v("Audits 已给出优化策略")]),t._v(" "),s("h4",{attrs:{id:"手动诊断-diagnostics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#手动诊断-diagnostics"}},[t._v("#")]),t._v(" 手动诊断 (Diagnostics)")]),t._v(" "),s("p",[t._v("采集了一些可能存在性能问题的指标")]),t._v(" "),s("h4",{attrs:{id:"运行时设置-runtime-settings"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行时设置-runtime-settings"}},[t._v("#")]),t._v(" 运行时设置 (Runtime Settings)")]),t._v(" "),s("p",[s("img",{attrs:{src:"/sys-doc/imgs/loading-opt.png",alt:"alt 加载过程"}})]),t._v(" "),s("h2",{attrs:{id:"performance-性能优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#performance-性能优化"}},[t._v("#")]),t._v(" performance 性能优化")])])}),[],!1,null,null,null);a.default=r.exports}}]);