(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{398:function(v,_,t){"use strict";t.r(_);var a=t(44),s=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[v._v("#")]),v._v(" 安全")]),v._v(" "),t("p",[v._v("浏览器安全可以分为三大块——Web 页面安全、浏览器网络安全和浏览器系统安全")]),v._v(" "),t("h2",{attrs:{id:"页面安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#页面安全"}},[v._v("#")]),v._v(" 页面安全")]),v._v(" "),t("p",[v._v("Web 世界会是开放的，但我们需要隐私保护")]),v._v(" "),t("h3",{attrs:{id:"同源策略-same-origin-policy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#同源策略-same-origin-policy"}},[v._v("#")]),v._v(" 同源策略（Same-origin policy）")]),v._v(" "),t("p",[v._v("如果两个 URL 的协议、域名和端口都相同，我们就称这两个 URL 同源")]),v._v(" "),t("p",[v._v("同源策略可以隔离各个站点之间的 DOM 交互、页面数据和网络通信。主要表现在 DOM、Web 数据和网络这三个层面。")]),v._v(" "),t("h4",{attrs:{id:"dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[v._v("#")]),v._v(" DOM")]),v._v(" "),t("p",[v._v("同源策略限制了来自不同源的 JavaScript 脚本对当前 DOM 对象读和写的操作。")]),v._v(" "),t("h4",{attrs:{id:"数据层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据层"}},[v._v("#")]),v._v(" 数据层")]),v._v(" "),t("p",[v._v("同源策略限制了不同源的站点读取当前站点的 Cookie、IndexDB、LocalStorage 等数据")]),v._v(" "),t("h4",{attrs:{id:"网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络"}},[v._v("#")]),v._v(" 网络")]),v._v(" "),t("p",[v._v("同源策略限制了通过 XMLHttpRequest 等方式将站点的数据发送给不同源的站点")]),v._v(" "),t("h3",{attrs:{id:"安全和便利性的权衡"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安全和便利性的权衡"}},[v._v("#")]),v._v(" 安全和便利性的权衡")]),v._v(" "),t("p",[v._v("隔绝是安全的，但是开发又是必须的，业务中肯定会有跨站点访问的场景，浏览器安全策略中提供的平衡技术")]),v._v(" "),t("h4",{attrs:{id:"第一步资源放开"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一步资源放开"}},[v._v("#")]),v._v(" 第一步资源放开")]),v._v(" "),t("p",[v._v("同源策略要求页面所有资源都来自一个源，第一个平衡就是允许页面嵌入第三方资源")]),v._v(" "),t("p",[v._v("带来的挑战是页面被劫持注入第三方脚本，即 xss 攻击")]),v._v(" "),t("p",[v._v("浏览器的弥补策略是内容安全策略，即 CSP,其核心思想是让服务器决定浏览器能够加载哪些资源，让服务器决定浏览器是否能够执行内联 JavaScript 代码")]),v._v(" "),t("h5",{attrs:{id:"内容安全策略-csp"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内容安全策略-csp"}},[v._v("#")]),v._v(" 内容安全策略( CSP )")]),v._v(" "),t("p",[v._v("主要目标是减少和报告 XSS 攻击")]),v._v(" "),t("p",[v._v("你需要配置你的网络服务器返回 Content-Security-Policy HTTP 头部，除此之外, ")]),t("meta"),v._v(" 元素也可以被用来配置该策略"),t("p"),v._v(" "),t("p",[v._v("配置策略")]),v._v(" "),t("ol",[t("li",[v._v("default-src 限制域脚本加载")]),v._v(" "),t("li",[v._v("script-src (en-US) 指令来防止内联脚本运行, 并杜绝 eval()的使用")]),v._v(" "),t("li",[v._v("style-src (en-US) 指令去限制来自一个 <style> 元素或者 style 属性的內联样式")]),v._v(" "),t("li",[v._v("img-src、media-src 限制音频或视频")])]),v._v(" "),t("h4",{attrs:{id:"跨域资源共享和跨文档消息机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨域资源共享和跨文档消息机制"}},[v._v("#")]),v._v(" 跨域资源共享和跨文档消息机制")]),v._v(" "),t("p",[v._v("不同站点无法进行跨站请求、无法操作 DOM，浏览器的平衡操作是提供跨域资源共享（CORS）、跨文档消息机制")]),v._v(" "),t("h5",{attrs:{id:"跨源资源共享-cors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨源资源共享-cors"}},[v._v("#")]),v._v(" 跨源资源共享（CORS）")]),v._v(" "),t("p",[v._v("服务器允许跨域而来的请求，CORS 请求前会发送预检请求，该请求主要是检测目标服务器是否支持跨域访问，请求头中会有有 HTTP 方法和真实请求中会用到的头。")]),v._v(" "),t("p",[v._v("出于安全性，有 HTTP 方法和真实请求中会用到的头。脚本内禁止 XMLHttpRequest 和 Fetch API 发起跨域请求")]),v._v(" "),t("h6",{attrs:{id:"使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[v._v("#")]),v._v(" 使用场景：")]),v._v(" "),t("ol",[t("li",[v._v("由 XMLHttpRequest 或 Fetch APIs 发起的跨源 HTTP 请求。")]),v._v(" "),t("li",[v._v("Web 字体 (CSS 中通过 @font-face 使用跨源字体资源)")]),v._v(" "),t("li",[v._v("WebGL 贴图")]),v._v(" "),t("li",[v._v("使用 drawImage 将 Images/video 画面绘制到 canvas。")]),v._v(" "),t("li",[v._v("来自图像的 CSS 图形")])]),v._v(" "),t("h6",{attrs:{id:"预检请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#预检请求"}},[v._v("#")]),v._v(" 预检请求：")]),v._v(" "),t("p",[v._v("OPTIONS 方法发起一个预检请求到服务器，主要目的就是确认目标服务器是否允许跨域访问，同样服务器端也可以通知客户端，是否需要携带身份凭证（包括 Cookies 和 HTTP 认证 相关数据）需要主动设置表示标识，默认不带")]),v._v(" "),t("h6",{attrs:{id:"带来的问题-xss-攻击-又称为-跨站脚本攻击"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#带来的问题-xss-攻击-又称为-跨站脚本攻击"}},[v._v("#")]),v._v(" 带来的问题 XSS 攻击，又称为“跨站脚本攻击”")]),v._v(" "),t("p",[v._v("XSS 全称是 Cross Site Scripting，为了与“CSS”区分开来，故简称 XSS，翻译过来就是“跨站脚本”，主要表现为在 html 注入恶意脚本")]),v._v(" "),t("p",[v._v("恶意脚本可做的事")]),v._v(" "),t("ol",[t("li",[v._v("可以窃取 Cookie 信息")]),v._v(" "),t("li",[v._v("可以监听用户行为")]),v._v(" "),t("li",[v._v("可以通过修改 DOM 伪造假的登录窗口，用来欺骗用户输入用户名和密码等信息。")]),v._v(" "),t("li",[v._v("还可以在页面内生成浮窗广告，这些广告会严重地影响用户体验。")])]),v._v(" "),t("p",[v._v("恶意脚本注入的方式")]),v._v(" "),t("ol",[t("li",[v._v("存储型 XSS 攻击\n"),t("ol",[t("li",[v._v("首先黑客利用站点漏洞将一段恶意 JavaScript 代码提交到网站的数据库中；")]),v._v(" "),t("li",[v._v("然后用户向网站请求包含了恶意 JavaScript 脚本的页面；")]),v._v(" "),t("li",[v._v("当用户浏览该页面的时候，恶意脚本就会将用户的 Cookie 信息等数据上传到服务器。")])])]),v._v(" "),t("li",[v._v("反射型 XSS 攻击\n"),t("ol",[t("li",[v._v("用户发送恶意代码")]),v._v(" "),t("li",[v._v("服务器又恶意代码返回")]),v._v(" "),t("li",[v._v("Web 服务器不会存储反射型 XSS 攻击的恶意脚本，这是和存储型 XSS 攻击不同的地方")])])]),v._v(" "),t("li",[v._v("基于 DOM 的 XSS 攻击\n"),t("ol",[t("li",[v._v("通过网络劫持、WiFi 路由器劫持的，有通过本地恶意软件来劫持的修改 dom")]),v._v(" "),t("li",[v._v("就是在传输或者用户使用过程中修改 dom")])])])]),v._v(" "),t("p",[v._v("防守：")]),v._v(" "),t("ol",[t("li",[v._v("服务器对输入脚本进行过滤或转码")])]),v._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[v._v("充分利用 CSP，严格的 CSP 可以有效地防范 XSS 攻击\n"),t("ol",[t("li",[v._v("限制其他域的脚本加载，即使插入浏览器也无法加载")]),v._v(" "),t("li",[v._v("禁止向第三方域提交数据，这样用户数据也不会外泄；")]),v._v(" "),t("li",[v._v("禁止执行内联脚本和未授权的脚本；")]),v._v(" "),t("li",[v._v("还提供了上报机制，这样可以帮助我们尽快发现有哪些 XSS 攻击，以便尽快修复问题")])])]),v._v(" "),t("li",[v._v("使用 HttpOnly 属性")])]),v._v(" "),t("h6",{attrs:{id:"带来的-csrf-攻击-又称为-跨站请求伪造"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#带来的-csrf-攻击-又称为-跨站请求伪造"}},[v._v("#")]),v._v(" 带来的 CSRF 攻击，又称为“跨站请求伪造”")]),v._v(" "),t("p",[v._v("CSRF 英文全称是 Cross-site request forgery，主要表现为黑客利用了用户的登录状态，发起跨站请求。")]),v._v(" "),t("p",[v._v("攻击方式：")]),v._v(" "),t("p",[v._v("前提是系统提供某一功能的接口，例如某网站提供转账接口")]),v._v(" "),t("div",{staticClass:"language-js extra-class"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("//localhost:3000/sendcoin")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 参数")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 目标用户")]),v._v("\nuser"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 目标金额")]),v._v("\nnumber"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])])]),t("ol",[t("li",[v._v("引诱用户点击黑客页面，在黑客页面构建 get、post 的自动请求")]),v._v(" "),t("li",[v._v("引诱用户点击黑客页面的相应链接，通过点击链接发起求情")])]),v._v(" "),t("p",[v._v("与 XSS 不同的是，CSRF 攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录状态来实施攻击。")]),v._v(" "),t("p",[v._v("分析：")]),v._v(" "),t("p",[v._v("csrf 攻击的必要条件")]),v._v(" "),t("ol",[t("li",[v._v("目标站点一定要有 CSRF 漏洞，即关键点是要能找到服务器的漏洞")]),v._v(" "),t("li",[v._v("用户要登录过目标站点，并且在浏览器上保持有该站点的登录状态")]),v._v(" "),t("li",[v._v("需要用户打开一个第三方站点，可以是黑客的站点")])]),v._v(" "),t("p",[v._v("与 XSS 攻击不同，CSRF 攻击不会往页面注入恶意脚本，因此黑客是无法通过 CSRF 攻击来获取用户页面数据的")]),v._v(" "),t("p",[v._v("防守：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("充分利用好 Cookie 的 SameSite 属性\n就是要同源站点携带 cookie，非同源站点禁止携带,Cookie 中的 SameSite 属性正是为了解决这个问题的\nSameSites 属性值：")]),v._v(" "),t("ol",[t("li",[v._v("Strict 最为严格，完全禁止非同源 cookie 携带")]),v._v(" "),t("li",[v._v("Lax 相对宽松一点，Get ，链接打开、get 表单会携带 Cookie，img、iframe 等标签加载的 URL，这些场景都不会携带 Cookie")]),v._v(" "),t("li",[v._v("None，在任何情况下都会发送 Cookie 数据")])])]),v._v(" "),t("li",[t("p",[v._v("验证请求的来源站点\n就是服务器端通过 HTTP 请求头中的 Referer 和 Origin 属性验证请求来源的站点")]),v._v(" "),t("ol",[t("li",[v._v("Referer 是 HTTP 请求头中的一个字段，记录了该 HTTP 请求的来源地址，，但是有一些场景是不适合将来源 URL 暴露给服务器的")]),v._v(" "),t("li",[v._v("Origin 属性只包含了域名信息，并没有包含具体的 URL 路径，")])]),v._v(" "),t("p",[v._v("服务器的策略是优先判断 Origin，如果请求头中没有包含 Origin 属性，再根据实际情况判断是否使用 Referer 值")])]),v._v(" "),t("li",[t("p",[v._v("CSRF Token")]),v._v(" "),t("ol",[t("li",[v._v("在浏览器向服务器发起请求时，服务器生成一个 CSRF Token，然后将该字符串植入到返回的页面中")]),v._v(" "),t("li",[v._v("在浏览器端如果要发起转账的请求，那么需要带上页面中的 CSRF Token，然后服务器会验证该 Token 是否合法。")])])])]),v._v(" "),t("h5",{attrs:{id:"跨文档消息机制-window-postmessage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跨文档消息机制-window-postmessage"}},[v._v("#")]),v._v(" 跨文档消息机制(window.postMessage)")]),v._v(" "),t("p",[v._v("适用于两个页面的端口、协议、 Document.domain 相同的安全通信")]),v._v(" "),t("h2",{attrs:{id:"浏览器系统安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器系统安全"}},[v._v("#")]),v._v(" 浏览器系统安全")]),v._v(" "),t("p",[v._v("浏览器安全问题，我们没有什么可操作的，但还是需要知道浏览器在这方面做了那些优化")]),v._v(" "),t("p",[v._v("首先浏览器漏洞是核弹级别的，因为通过浏览器漏洞可以入侵浏览器进程内部的、可以读取和修改浏览器进程内部的任意内容，还可以穿透浏览器，在用户的操作系统上悄悄地安装恶意软件、监听用户键盘输入信息以及读取用户硬盘上的文件内容")]),v._v(" "),t("h3",{attrs:{id:"安全沙箱"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安全沙箱"}},[v._v("#")]),v._v(" 安全沙箱")]),v._v(" "),t("p",[v._v("利用系统提供的安全技术，将渲染进程和浏览器内和操作系统隔离")]),v._v(" "),t("p",[v._v("浏览器可以下载任意类型的文件，即使有恶意程序只要不执行就不会生效。但是渲染进行需要对这些网络下载内容进行处理就有可能执行到恶意程序，对系统漏洞发起攻击，基于此我们需要对渲染进程创建隔离沙箱")]),v._v(" "),t("h4",{attrs:{id:"安全沙箱对渲染进程存在一些调整"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安全沙箱对渲染进程存在一些调整"}},[v._v("#")]),v._v(" 安全沙箱对渲染进程存在一些调整")]),v._v(" "),t("ol",[t("li",[v._v("持久存储，cookie、storage 网络进程的缓存文件都需要在浏览器进程完成")]),v._v(" "),t("li",[v._v("网络访问，渲染进程不能直接发起网络请求，需要交由浏览器进行来处理，此刻也会检测是否有跨域，资源混用")]),v._v(" "),t("li",[v._v("用户交互，渲染进程无法直接访问窗口句柄、即无法直接监听用户输入、渲染页面，这些都交由浏览器进程来处理通过 IPC 同步消息")])]),v._v(" "),t("h4",{attrs:{id:"站点隔离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#站点隔离"}},[v._v("#")]),v._v(" 站点隔离")]),v._v(" "),t("p",[v._v("将根域名和协议相同的站点放到同一渲染进程中")]),v._v(" "),t("h2",{attrs:{id:"网络安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络安全"}},[v._v("#")]),v._v(" 网络安全")]),v._v(" "),t("p",[v._v("起初 http 就是为了简单的文本传输，没有太强的加密需求，所以一直保持着明文传输")]),v._v(" "),t("h3",{attrs:{id:"存在的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#存在的问题"}},[v._v("#")]),v._v(" 存在的问题")]),v._v(" "),t("p",[v._v("HTTP 传输的内容很容易被中间人窃取、伪造和篡改，通常我们把这种攻击方式称为中间人攻击，数据会经过用户电脑、WiFi 路由器、运营商和目标服务器，很可能被恶意软件、钓鱼 wifi 抓取篡改")]),v._v(" "),t("h3",{attrs:{id:"解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[v._v("#")]),v._v(" 解决方案：")]),v._v(" "),t("p",[v._v("在 HTTP 协议栈中引入安全层")]),v._v(" "),t("p",[v._v("主要目的：对发起 HTTP 请求的数据进行加密操作和对接收到 HTTP 的内容进行解密操作")]),v._v(" "),t("h3",{attrs:{id:"实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实践"}},[v._v("#")]),v._v(" 实践")]),v._v(" "),t("h4",{attrs:{id:"第一版-使用对称加密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第一版-使用对称加密"}},[v._v("#")]),v._v(" 第一版：使用对称加密")]),v._v(" "),t("p",[v._v("对称加密即指服务端和客户端的使用的是相同的加密算法和密钥")]),v._v(" "),t("p",[v._v("解决方案：")]),v._v(" "),t("ol",[t("li",[v._v("客户端发送加密套件、client-radom")]),v._v(" "),t("li",[v._v("服务端接受加密消息，选择并返回加密算法、service-radom")]),v._v(" "),t("li",[v._v("客户端要返回确认消息")]),v._v(" "),t("li",[v._v("服务端接到客户端的确认消息也会返回确认消息")])]),v._v(" "),t("p",[v._v("解决了明文传输的问题，服务器客户端采用加解密的方式进行通信")]),v._v(" "),t("p",[v._v("存在的问题")]),v._v(" "),t("ol",[t("li",[v._v("加密协商的过程还是以明文的方式进行")])]),v._v(" "),t("p",[t("img",{attrs:{src:"/sys-doc/imgs/https1.0.png",alt:"alt https1.0"}})]),v._v(" "),t("h4",{attrs:{id:"第二版-使用非对称加密"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第二版-使用非对称加密"}},[v._v("#")]),v._v(" 第二版：使用非对称加密")]),v._v(" "),t("p",[v._v("非对称就是指原先对称的时候双方都可加解密，现在只有客户端加密、服务端解密所以就叫非对称")]),v._v(" "),t("p",[v._v("解决方案：")]),v._v(" "),t("ol",[t("li",[v._v("客户端发送非对称加密套件")]),v._v(" "),t("li",[v._v("服务端接受消息并返回非对称加密算法、公钥")]),v._v(" "),t("li",[v._v("客户端回复确认消息")]),v._v(" "),t("li",[v._v("服务端回复确认消息")])]),v._v(" "),t("p",[v._v("客户端使用非对称加密算法和公钥对消息进行加密")]),v._v(" "),t("p",[v._v("解决了对称加密加密算法、密钥明文传输的问题")]),v._v(" "),t("p",[v._v("存在的问题")]),v._v(" "),t("ol",[t("li",[v._v("非对称加密较对称加密更耗时")])]),v._v(" "),t("p",[t("img",{attrs:{src:"/sys-doc/imgs/https2.0.png",alt:"alt https2.0"}})]),v._v(" "),t("h4",{attrs:{id:"第三版-对称加密和非对称加密搭配使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第三版-对称加密和非对称加密搭配使用"}},[v._v("#")]),v._v(" 第三版：对称加密和非对称加密搭配使用")]),v._v(" "),t("p",[v._v("如果全流程对每个请求都采用非对称加密那将影响用户体验")]),v._v(" "),t("p",[v._v("解决方案")]),v._v(" "),t("ol",[t("li",[v._v("客户端发送对称、非对称加密套件、client-radom")]),v._v(" "),t("li",[v._v("服务端返回对称、非对称加密算法、service-radom、公钥")]),v._v(" "),t("li",[v._v("客户端在生成一个 pre-master radom,使用公钥加密发送至服务端")]),v._v(" "),t("li",[v._v("服务端回复确认消息")])]),v._v(" "),t("p",[v._v("服务端客户端采用对称加密、使用 client-radom、service-radom、pre-master 作为新的密钥进行加密通信")]),v._v(" "),t("p",[v._v("解决了对称加密使用明传输密钥、非对称加密耗时的问题")]),v._v(" "),t("p",[v._v("存在的问题：")]),v._v(" "),t("ol",[t("li",[v._v("如果发生域名劫持等事件，浏览器无法确认跟自己通信的服务器是不是真实的")])]),v._v(" "),t("p",[t("img",{attrs:{src:"/sys-doc/imgs/https3.0.png",alt:"alt https3.0"}})]),v._v(" "),t("h4",{attrs:{id:"第四版-添加数字证书"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第四版-添加数字证书"}},[v._v("#")]),v._v(" 第四版：添加数字证书")]),v._v(" "),t("p",[v._v("就是在协商加密的过程中首先确认对方的身份")]),v._v(" "),t("p",[v._v("解决方案")]),v._v(" "),t("ol",[t("li",[v._v("服务端返回对称、非对称加密算法、service-radom、数字证书（CA 机构证书）")])]),v._v(" "),t("p",[v._v("数字证书内会包含公钥")]),v._v(" "),t("h5",{attrs:{id:"数字证书申请"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数字证书申请"}},[v._v("#")]),v._v(" 数字证书申请")]),v._v(" "),t("ol",[t("li",[v._v("首先需要准备一套私钥和公钥，私钥留着自己使用")]),v._v(" "),t("li",[v._v("然后向 CA 机构提交公钥、公司、站点等信息并等待认证，这个认证过程可能是收费的")]),v._v(" "),t("li",[v._v("CA 进行核实")]),v._v(" "),t("li",[v._v("审核通过，CA 会发认证的数字证书")])]),v._v(" "),t("p",[t("img",{attrs:{src:"/sys-doc/imgs/ca.png",alt:"alt ca"}})]),v._v(" "),t("h5",{attrs:{id:"数字证书验证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数字证书验证"}},[v._v("#")]),v._v(" 数字证书验证")]),v._v(" "),t("p",[v._v("浏览器需要验证证书的有效期、证书是否被 CA 吊销、证书是否是合法的 CA 机构颁发的")]),v._v(" "),t("p",[v._v("验证过程")]),v._v(" "),t("ol",[t("li",[v._v("验证证书的有效期")]),v._v(" "),t("li",[v._v("验证数字证书是否被吊销了，一种是下载吊销证书列表，第二种是在线验证方式")]),v._v(" "),t("li",[v._v("证极数字证书是否是 CA 机构颁发的\n"),t("ol",[t("li",[v._v("首先，浏览器利用证书的原始信息计算出信息摘要")]),v._v(" "),t("li",[v._v("然后，利用 CA 的公钥来解密数字证书中的数字签名，解密出来的数据也是信息摘要")]),v._v(" "),t("li",[v._v("最后，判断这两个信息摘要是否相等就可以了")])])])]),v._v(" "),t("p",[v._v("存在的问题")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("CA 公钥的怎么获取")]),v._v(" "),t("ol",[t("li",[v._v("当你部署 HTTP 服务器的时候，除了部署当前的数字证书之外，还需要部署 CA 机构的数字证书，CA 机构的数字证书包括了 CA 的公钥，以及 CA 机构的一些基础信息。")]),v._v(" "),t("li",[v._v("加密协商的时候发生给浏览器")])]),v._v(" "),t("p",[v._v("如果服务器没有部署 CA 机构的证书，浏览器也会自己下载不过会耗时")]),v._v(" "),t("p",[v._v("存在的问题：CA 机构不合法怎么办")])]),v._v(" "),t("li",[t("p",[v._v("CA 机构的合法性证明")]),v._v(" "),t("p",[v._v("并没有一个非常好的方法来证明 CA 的合法性，妥协的方案是，直接在操作系统中内置这些 CA 机构的数字证书")]),v._v(" "),t("p",[v._v("但 CA 机构众多，因此操作系统不可能将每家 CA 的数字证书都内置进操作系统。")]),v._v(" "),t("p",[v._v("解决方案：")]),v._v(" "),t("p",[v._v("数字证书链：将颁发证书的机构划分为两种类型，根 CA(Root CAs)和中间 CA(Intermediates CAs)")]),v._v(" "),t("p",[v._v("浏览器会验证当前 CA 的合法性、如果发现该 CA 是中间 CA 会继续验证这个中间 CA 的根证书，直到根 CA")]),v._v(" "),t("p",[v._v("最后的根 CA 就是简单地判断这个根证书在不在操作系统里面，在即合法、不在即非法")]),v._v(" "),t("p",[v._v("首先根 CA 一般都会内置在各大操作系统内，而根 CA 的认证是要通过 WebTrust 国际安全审计的")])])]),v._v(" "),t("p",[t("img",{attrs:{src:"/sys-doc/imgs/https4.0.png",alt:"alt https4.0"}})])])}),[],!1,null,null,null);_.default=s.exports}}]);