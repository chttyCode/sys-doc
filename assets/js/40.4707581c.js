(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{398:function(v,_,l){"use strict";l.r(_);var t=l(44),i=Object(t.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("h1",{attrs:{id:"share-browser"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#share-browser"}},[v._v("#")]),v._v(" share browser")]),v._v(" "),l("h2",{attrs:{id:"基础知识"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#基础知识"}},[v._v("#")]),v._v(" 基础知识")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("浏览器简历")]),v._v(" "),l("ul",[l("li",[v._v("初代浏览器 Netscape Navigator")]),v._v(" "),l("li",[v._v("浏览器大战 Netscape 倒下，微软 Internet Explorer 6 垄断了市场，但是不兼容标准，但是微软好景不长，Netscape 的那波人又搞了一个 Firefox、同时苹果搞了一个 Safari 还有 Opera 等与其竞争")])])]),v._v(" "),l("li",[l("p",[v._v("当下浏览器")]),v._v(" "),l("ul",[l("li",[v._v("三分天下，Mozilla 的 Gecko、Google 的 Blink、还有苹果的的 WebKit（Blink 的近亲）")]),v._v(" "),l("li",[v._v("Gecko 从初代开始就以兼容标准为特色、延续至今")]),v._v(" "),l("li",[v._v("WebKit 脱胎于 KHTML 及 KJS，即为其一个分支发展而来，初代由苹果开发，前期仅开源 WebCore 及 JavaScriptCore 开源，于 2005 年 6 月 7 日将 Webkit 开源")]),v._v(" "),l("li",[v._v("Blink 由 Google 于 2013 年 4 月 3 日宣传自行开发，Blink 从 WebKit 的http://trac.webkit.org/changeset/147503/webkit节点checkout,自此chrome拥有了更多的自由度、精简优化了整个WebKit程序库")])])]),v._v(" "),l("li",[l("p",[v._v("chrome 的架构演进")]),v._v(" "),l("ul",[l("li",[v._v("单进程架构\n"),l("ul",[l("li",[v._v("所有的功能都运行在一个浏览器进程中，这些功能包括了网络、插件、javascript 引擎、渲染引擎等")]),v._v(" "),l("li",[v._v("存在的问题\n"),l("ul",[l("li",[v._v("不稳定\n"),l("ul",[l("li",[v._v("所有功能运行在同一个进程中，任意一个功能有问题都会引起浏览器的崩溃")])])]),v._v(" "),l("li",[v._v("不流畅\n"),l("ul",[l("li",[v._v("所有页面运行在同一个进程中、内存泄漏、占用主线程时间过长都是引起不流畅的原因")])])]),v._v(" "),l("li",[v._v("不安全\n"),l("ul",[l("li",[v._v("可以插件和脚本两个方面看，插件可以用 c/c++写，直接读取系统资源、脚本可以通过浏览器漏洞获取系统权限")])])])])]),v._v(" "),l("li",[v._v("多进程架构")])])]),v._v(" "),l("li",[v._v("多进程架构\n"),l("img",{attrs:{src:"/sys-doc/imgs/browser-arch.png",alt:"alt 多进程架构图"}}),v._v(" "),l("ul",[l("li",[v._v("进程描述\n"),l("table",[l("thead",[l("tr",[l("th",[v._v("process")]),v._v(" "),l("th",[v._v("toTos")])])]),v._v(" "),l("tbody",[l("tr",[l("td",[v._v("Browser")]),v._v(" "),l("td",[v._v("主要负责地址栏，书签，后退和前进按钮、界面显示、用户交互、子进程管理，同时提供存储等功能")])]),v._v(" "),l("tr",[l("td",[v._v("Renderer")]),v._v(" "),l("td",[v._v("核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，Blink 引擎运行在其中，Blink 默认嵌入了 V8 javascript 引擎，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下")])]),v._v(" "),l("tr",[l("td",[v._v("Plugin")]),v._v(" "),l("td",[v._v("控制网站使用的任何插件，例如 flash。")])]),v._v(" "),l("tr",[l("td",[v._v("GPU")]),v._v(" "),l("td",[v._v("Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程")])])])])]),v._v(" "),l("li",[v._v("解决了")]),v._v(" "),l("li",[v._v("稳定性\n"),l("ul",[l("li",[v._v("多进程架构相互隔离，某一进程崩溃不会引起整个浏览器崩溃")])])]),v._v(" "),l("li",[v._v("安全问题\n"),l("ul",[l("li",[v._v("多进程架构可以使用安全沙箱机制，chrome 的插件进程&渲染进程运行在安全沙箱中")])])]),v._v(" "),l("li",[v._v("流畅问题\n"),l("ul",[l("li",[v._v("chrome 默认为每个 tab 创建一个渲染进程，即时 javascript 阻塞了，也不会影响浏览器或其他 tab")])])]),v._v(" "),l("li",[v._v("存在的问题\n"),l("ul",[l("li",[v._v("资源占用\n"),l("ul",[l("li",[v._v("每个进程都会有公共的基础架构副本，这无疑增加了内存的占用")])])])])])])]),v._v(" "),l("li",[v._v("服务架构\n"),l("ul",[l("li",[v._v("未来面向服务的架构\n"),l("ul",[l("li",[v._v("即采用的是'面向服务架构'的思想，将原来的模块重构成独立的服务，每个服务定义好访问接口，从而构建一个高内聚、低偶尔、易维护、扩展的系统")]),v._v(" "),l("li",[v._v("总的思想就是在强大性能设备上会以多进程的方式运行基础服务，但是如果在资源受限的设备上，Chrome 会将很多服务整合到一个进程中，从而节省内存占用")]),v._v(" "),l("li",[v._v("资源受限\n"),l("img",{attrs:{src:"/sys-doc/imgs/browser-arch2.png",alt:"alt 多进程架构图"}})]),v._v(" "),l("li",[v._v("资源丰富\n"),l("img",{attrs:{src:"/sys-doc/imgs/servicfication.png",alt:"alt 多进程架构图"}})]),v._v(" "),l("li",[v._v("站点隔离(Site Isolation) 实现得益于多进程架构")])])])])])])]),v._v(" "),l("li",[l("p",[v._v("输入 URL 到页面显示")]),v._v(" "),l("ul",[l("li",[l("p",[v._v("导航流程")]),v._v(" "),l("ul",[l("li",[v._v("导航流程从浏览器进程开始\n"),l("ul",[l("li",[v._v("除了独立出来进程之外，其他功能都是由浏览器进行完成的")]),v._v(" "),l("li",[v._v("浏览器进程中的线程\n"),l("ul",[l("li",[v._v("UI 线程")]),v._v(" "),l("li",[v._v("network 网络线程(网络进程)")]),v._v(" "),l("li",[v._v("storage 线程")])])])])]),v._v(" "),l("li",[v._v("用户输入\n"),l("ul",[l("li",[v._v("UI 线程会判断是搜索还是 site")]),v._v(" "),l("li",[v._v("在执行导航之前还有执行当前页面的 beforeunload 事件，该事件可以取消导航流程")]),v._v(" "),l("li",[v._v("执行导航的时候并不是立即刷新当前的页面，而是要等待渲染进程提交文档后才会刷新页面")])])]),v._v(" "),l("li",[v._v("开始导航\n"),l("ul",[l("li",[v._v("UI 线程\n"),l("ul",[l("li",[v._v("UI 线程调用网络线程(网络进程)，获取网络资源")]),v._v(" "),l("li",[v._v("同时 UI 线程就会找到或者启动一个渲染进程\n"),l("ul",[l("li",[v._v("找到可能存在可复用的渲染进程、同站点")]),v._v(" "),l("li",[v._v("发起网络请求和准备渲染进程并行，网络请求有一定的时延")])])])])]),v._v(" "),l("li",[v._v("网络线程(网络进程)(pc)\n"),l("ol",[l("li",[v._v("如果网络线程(网络进程)收到 301 这样的响应码，会通知 UI 线程发生重定向")]),v._v(" "),l("li",[v._v("网络线程(网络进程)接受数据判别 content-type，分发执行 html、css、js 交由渲染进程处理，file 交由 download manager")]),v._v(" "),l("li",[v._v("检测 html 内容是否符合安全规范，checks down\n"),l("ul",[l("li",[v._v("阻止跨域")]),v._v(" "),l("li",[v._v("资源混合警告(http/https)")])])]),v._v(" "),l("li",[v._v("通知 UI 线程，数据 ready")]),v._v(" "),l("li",[v._v("UI 找到之前创建的渲染进程，进行页面渲染")])])])])])])]),v._v(" "),l("li",[l("p",[v._v("渲染流程")]),v._v(" "),l("blockquote",[l("p",[v._v("渲染过程的核心工作是将 HTML、CSS 和 JavaScript 转换成一个用户可以交互的网页,主要有主线程、工作线程、合成线程、光栅线程组成")])]),v._v(" "),l("p",[l("img",{attrs:{src:"/sys-doc/imgs/renderer.png",alt:"alt 多进程架构图"}})]),v._v(" "),l("ul",[l("li",[l("p",[v._v("DOM 解析")]),v._v(" "),l("ul",[l("li",[v._v("接受到浏览器进程的提交文档通知后，建立与网络进程的数据连接、开始接受 html Data、但是 HTML 数据流，无法被浏览器识别，需根据 "),l("a",{attrs:{href:"https://html.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"}},[v._v("HTML Standard"),l("OutboundLink")],1),v._v(" 标准进行解析转为能够识别 DOM 树结构、DOM 结构可以被浏览器识别同时提供 javascript 操作的接口")])]),v._v(" "),l("p",[l("img",{attrs:{src:"/sys-doc/imgs/dom.png",alt:"alt 多进程架构图"}})]),v._v(" "),l("ul",[l("li",[v._v("DOM 解析过程中遇到 script 会中断等待 javascript 的下载执行")]),v._v(" "),l("li",[v._v("DOM 解析过程可以对 css 设置预解析"),l("link",{attrs:{rel:"preload"}}),v._v(",对 js 可以设置 async or defer 避免中断 DOM 解析")])])]),v._v(" "),l("li",[l("p",[v._v("样式计算")]),v._v(" "),l("ul",[l("li",[v._v("同样需要主线程把 CSS 转换为浏览器能够理解的 styleSheets。因为 css 中的属性值有很多除了转换结构，还需转换样式表中的属性值，使其标准化，eg:2em 被解析成了 32px，red 被解析成了 rgb(255,0,0)，bold 被解析成了 700，根据 dom 的继承关系、层叠关系来计算合理的样式")])])]),v._v(" "),l("li",[l("p",[v._v("布局阶段")]),v._v(" "),l("ul",[l("li",[v._v("有了 DOM 树和样式还不足以画出页面，因为不知道每个元素纪在页面中的几何位置")]),v._v(" "),l("li",[v._v("主线程根据 DOM 树和样式表计算出每个元素的几何位置，最后生产布局树，布局树较 DOM 有 2 个不同点：第一设置 display:none 属性的节点不会出现在布局树上，第二伪元素也会出现在布局树上")]),v._v(" "),l("li",[v._v("任务几何属性的变动都会引起重新布局，而重布局是及其消耗性能的工作")])])]),v._v(" "),l("li",[l("p",[v._v("绘制")])])])]),v._v(" "),l("li",[l("p",[v._v("交互演进")]),v._v(" "),l("ul",[l("li",[v._v("单进程\n"),l("ul",[l("li",[v._v("存在的问题")])])]),v._v(" "),l("li",[v._v("事件循环\n"),l("ul",[l("li",[v._v("存在的问")])])]),v._v(" "),l("li",[v._v("微任务")]),v._v(" "),l("li",[v._v("宏任务")]),v._v(" "),l("li",[v._v("延迟队列")])])])])])]),v._v(" "),l("h2",{attrs:{id:"通信演进"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#通信演进"}},[v._v("#")]),v._v(" 通信演进")]),v._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",[l("code",[v._v("- Http1.0\n- Http1.1\n- Http2\n- Http3\n")])])]),l("h2",{attrs:{id:"性能优化"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[v._v("#")]),v._v(" 性能优化")]),v._v(" "),l("div",{staticClass:"language- extra-class"},[l("pre",[l("code",[v._v("- 性能分析\n- 加载阶段\n- 交互阶段\n- 卸载\n")])])]),l("h2",{attrs:{id:"安全"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#安全"}},[v._v("#")]),v._v(" 安全")]),v._v(" "),l("h2",{attrs:{id:"缓存"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[v._v("#")]),v._v(" 缓存")])])}),[],!1,null,null,null);_.default=i.exports}}]);