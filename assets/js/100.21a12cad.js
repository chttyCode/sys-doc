(window.webpackJsonp=window.webpackJsonp||[]).push([[100],{457:function(t,a,s){"use strict";s.r(a);var v=s(44),e=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"八月"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八月"}},[t._v("#")]),t._v(" 八月")]),t._v(" "),s("h2",{attrs:{id:"vscode-代码冲突处理-没有操作可选项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vscode-代码冲突处理-没有操作可选项"}},[t._v("#")]),t._v(" vscode 代码冲突处理,没有操作可选项")]),t._v(" "),s("ol",[s("li",[t._v("setting")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// File > Preferences > Settings")]),t._v("\n    git merge edit 不要勾选，否则会视为自动merge\n\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("In VScode settings (cmd + P , json settings) set:")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"editor.codeLens"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git.mergeEditor"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v('You can go to Settings and search for "codeLens" to make sure it is enabled.')])]),t._v(" "),s("p",[t._v("参考：\n"),s("a",{attrs:{href:"https://stackoverflow.com/questions/47241098/accept-incoming-change-not-appearing-in-vs-code",target:"_blank",rel:"noopener noreferrer"}},[t._v("地址"),s("OutboundLink")],1)]),t._v(" "),s("h2",{attrs:{id:"耗子的技术领导力"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#耗子的技术领导力"}},[t._v("#")]),t._v(" 耗子的技术领导力")]),t._v(" "),s("h3",{attrs:{id:"扎实的基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扎实的基础知识"}},[t._v("#")]),t._v(" 扎实的基础知识")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("编程部分：\n\n    c语言\n    编程范式、设计模式\n    算法、数据结构\n\n系统部分：\n\n    操作系统\n    网络基础\n    数据库原理\n    分布式技术架构\n\n这些基础都是基石，需要用一生去研究学习\n")])])]),s("h3",{attrs:{id:"提高学习能力"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提高学习能力"}},[t._v("#")]),t._v(" 提高学习能力")]),t._v(" "),s("p",[t._v("学习信息：英文简索能力\n与高手交流\n举一反三\n不怕困难\n开放态度")]),t._v(" "),s("h3",{attrs:{id:"坚持做正确的事"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#坚持做正确的事"}},[t._v("#")]),t._v(" 坚持做正确的事")]),t._v(" "),s("p",[t._v("提高效率\n自动化\n掌握前沿技术")]),t._v(" "),s("h3",{attrs:{id:"高要求自己"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高要求自己"}},[t._v("#")]),t._v(" 高要求自己")]),t._v(" "),s("p",[t._v("lead by code")]),t._v(" "),s("h2",{attrs:{id:"大前端会议"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#大前端会议"}},[t._v("#")]),t._v(" 大前端会议")]),t._v(" "),s("p",[t._v("开发范式")]),t._v(" "),s("p",[t._v("达到的效果：易扩展可维护")]),t._v(" "),s("p",[t._v("在大团队规划化、高复杂度、长期科可维护的项目")]),t._v(" "),s("p",[t._v("如何解决\n类型系统亲和性\n逻辑拆分、整理和复用的能力\n可重构性\n语法简洁度、可读性、上手成本、开发体验")]),t._v(" "),s("p",[t._v("框架的解决方案：\n组合式 API：\nhooks:强大的逻辑组合能力\ncomposition API:依赖追踪模式的组合能力")]),t._v(" "),s("h2",{attrs:{id:"温故了栈、队列两种数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#温故了栈、队列两种数据结构"}},[t._v("#")]),t._v(" 温故了栈、队列两种数据结构")]),t._v(" "),s("p",[t._v("栈、队列都是操作受限的线性数据结构")]),t._v(" "),s("p",[t._v("栈一端出入，实现方式不同可分为顺序栈、链式栈")]),t._v(" "),s("p",[t._v("分析了用数组实现的动态扩容栈复杂度，采用摊还分析法，最坏情况下是 copy 的过程，复杂度 O(n)，将其均分到 k-1 次入栈，时间复杂度即为 O(1),多数情况下摊还之后都是最好的时间复杂度")]),t._v(" "),s("p",[t._v("栈的实际应用，函数调用采用栈的形式维护，因为函数的调用方式就是栈顶出入\n计算，计算机无法像人一样理解计算公式")]),t._v(" "),s("h2",{attrs:{id:"构建工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建工具"}},[t._v("#")]),t._v(" 构建工具")]),t._v(" "),s("p",[t._v("webpack、rollup、grunt、gulp\n专注于打包，抽象层次低\nwebpack:打包应用\nrollup:打包组件\ngrunt、gulp:运行在 node 执行自动化工具")]),t._v(" "),s("p",[t._v("parcel、Vue-Cli、Create-react-app\n专注于应用，抽象层次高")]),t._v(" "),s("p",[t._v("vite、EsBuild 新一代构建工具\nvite:noBundler\nEsBuild:为 Go 语言开发")]),t._v(" "),s("p",[t._v("SWC 为 Rust 语言开发")]),t._v(" "),s("p",[t._v("构建工具的方向")]),t._v(" "),s("p",[t._v("JS/原生语言混合的工具链、纯原生语言开发的工具链会导致社区的门槛变高，不利于社区发展")]),t._v(" "),s("h2",{attrs:{id:"读工作之余如果提升自己"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#读工作之余如果提升自己"}},[t._v("#")]),t._v(" 读工作之余如果提升自己")]),t._v(" "),s("p",[t._v("提升首先应该思考的是时间的管理，第一就时要有自己的反省时间，这个时间用于复盘反省\n对于四象限分类中的事情，重要紧急的加大投入确保按时完成，对于不重要紧急的事件，以快速响应为准\n对于其他象限的任务学会说 no")]),t._v(" "),s("p",[t._v("碎片时间管理，可以使用番茄工作法，提高专注度")]),t._v(" "),s("p",[t._v("对于拿来主义，要学会融入，输出才是自己的")]),t._v(" "),s("h2",{attrs:{id:"总结下-es6"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结下-es6"}},[t._v("#")]),t._v(" 总结下 es6")]),t._v(" "),s("ul",[s("li",[t._v("proxy"),s("br"),t._v("\n有 13 个拦截 API\n可以是实现对 array 的 api 访问进行拦截\n对代码无侵入\n底层配合 Reflect 进行操作")]),t._v(" "),s("li",[t._v("Reflect\n以前有命令式 delete 、in 编程，统一为函数式操作\n配合 proxy 进行拦截的写入获取")]),t._v(" "),s("li",[t._v("for of\n对数组、类数组、dom 节点等实现了 Iterator 接口的数据结构提供统一的遍历方法\n但是对自定义实现的字面量对象并不适用\n只能访问自有属性")])]),t._v(" "),s("h2",{attrs:{id:"前端优化之内存优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前端优化之内存优化"}},[t._v("#")]),t._v(" 前端优化之内存优化")]),t._v(" "),s("h2",{attrs:{id:"算法之递归"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法之递归"}},[t._v("#")]),t._v(" 算法之递归")]),t._v(" "),s("p",[t._v("什么样的问题可以用递归去解")]),t._v(" "),s("ol",[s("li",[t._v("问题可以分解")]),t._v(" "),s("li",[t._v("子问题的处理方式和原问题一样")]),t._v(" "),s("li",[t._v("存在终止条件")])]),t._v(" "),s("p",[t._v("递归存在 2 类问题")]),t._v(" "),s("ol",[s("li",[t._v("重复计算问题")]),t._v(" "),s("li",[t._v("栈溢出问题")])]),t._v(" "),s("p",[t._v("如何写好递归")]),t._v(" "),s("ol",[s("li",[t._v("避免人肉递归")]),t._v(" "),s("li",[t._v("可以假定子问题已解决，只思考当前层的关系")]),t._v(" "),s("li",[t._v("找出规律分解子问题")])]),t._v(" "),s("h2",{attrs:{id:"算法之数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法之数组"}},[t._v("#")]),t._v(" 算法之数组")]),t._v(" "),s("p",[t._v("一种线性数据结构，即数据只知道相邻之间的关系")]),t._v(" "),s("p",[t._v("数组的随机访问 O(1)\n数组是根据寻址公式来进行查找的")]),t._v(" "),s("p",[t._v("对需要群移的操作可以采用标记移动的方式")]),t._v(" "),s("h2",{attrs:{id:"算法之栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法之栈"}},[t._v("#")]),t._v(" 算法之栈")]),t._v(" "),s("p",[t._v("是一种操作受限的线性数据结构，受限主要是为了约束，保证安全")]),t._v(" "),s("p",[t._v("特点是先进后出")]),t._v(" "),s("p",[t._v("根据实现方式不同，分为顺序栈、链式栈")]),t._v(" "),s("p",[t._v("用数组实现顺序栈时，涉及动态扩容的栈")]),t._v(" "),s("p",[t._v("案例：")]),t._v(" "),s("p",[t._v("算式的计算，浏览器的前进后退、函数的调用都可采用栈的方式")]),t._v(" "),s("h2",{attrs:{id:"算法之队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法之队列"}},[t._v("#")]),t._v(" 算法之队列")]),t._v(" "),s("p",[t._v("同样也是操作受限的线性数据结构")]),t._v(" "),s("p",[t._v("特点是一端入栈一端出栈")]),t._v(" "),s("p",[t._v("队列在日常生活中的例子比比皆是")]),t._v(" "),s("p",[t._v("根据实现方式也是可以分为顺序队列、链式链式")]),t._v(" "),s("p",[t._v("因为队列是开头出栈，结构入栈，这里涉及到群移的操作，实现的方式就是在出栈的时候做移动\n采用双指针的方式维护，出栈不做处理，对入栈的根据是否已满，进行群移调整")]),t._v(" "),s("p",[t._v("对这种群里的操作还有一种数据结构就是循环队列，找规律，对出入栈操作，会有一个空置的位置")]),t._v(" "),s("p",[t._v("并发&阻塞队列可以实现生产-消费模型")]),t._v(" "),s("h2",{attrs:{id:"git-回某个单文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-回某个单文件"}},[t._v("#")]),t._v(" git 回某个单文件")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("git log fileName "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查找单文件")]),t._v("\n\ngit checkout commitId fileName "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//根据commitId 回滚单文件")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);